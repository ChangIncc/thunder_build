<?php

/**
 * @file
 * Contains access_unpublished implementations.
 */

use Drupal\access_unpublished\Form\AccessUnpublishedForm;
use Drupal\Core\Entity\EntityPublishedInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_entity_access().
 */
function access_unpublished_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {

  $tokenKey = \Drupal::config('access_unpublished.settings')->get('hash_key');

  if (
    $operation == 'view' &&
    \Drupal::request()->query->has($tokenKey) &&
    $entity instanceof EntityPublishedInterface &&
    $account->hasPermission('access_unpublished ' . $entity->getEntityTypeId() . ' ' . $entity->bundle()) &&
    !$entity->isPublished()
  ) {

    $query = \Drupal::entityQuery('access_token');
    $tokens = $query->condition('entity_type', $entity->getEntityType()->id())
      ->condition('entity_id', $entity->id())
      ->condition('value', \Drupal::request()->get($tokenKey))
      ->execute();

    if ($tokens) {

      /** @var \Drupal\access_unpublished\AccessTokenInterface $token */
      $token = \Drupal::entityTypeManager()
        ->getStorage('access_token')
        ->load(current($tokens));

      return AccessResult::allowedIf(!$token->isExpired())
        ->cachePerPermissions()
        ->setCacheMaxAge($token->get('expire')->value - REQUEST_TIME);

    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_alter().
 */
function access_unpublished_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(AccessUnpublishedForm::class)
    ->formAlter($form, $form_state, $form_id);
}
